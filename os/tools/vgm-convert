#!/usr/bin/env python2

import argparse
import struct

parser = argparse.ArgumentParser(description='Generate tiles for png image')
parser.add_argument('source', help='input file')

args = parser.parse_args()

with open(args.source) as f:
	data = bytearray(f.read())

result = bytearray()

def copy(cmd, src, idx, len):
	result = bytearray()
	result.append(cmd)
	result += src[idx: idx + len]
	return result

idx = 0x80
sync = 0
while idx < len(data):
	cmd = data[idx]
	idx += 1
	if cmd == 0x62:
		#print 'sync'
		#result += copy(cmd, data, idx, 0)
		sync += 1
		continue
	elif sync != 0:
		result.append(0x62)
		result.append(sync)
		sync = 0

	if cmd == 0x67:
		size, = struct.unpack('<I', data[idx + 2: idx + 6])
		idx += 6 + size
	elif cmd == 0x50:
		#print 'psg %02x' %data[idx]
		idx += 1
	elif cmd == 0x52:
		#print 'part1 write 0x%02x 0x%02x' %(data[idx], data[idx + 1])
		result += copy(cmd, data, idx, 2)
		idx += 2
	elif cmd == 0x53:
		#print 'part2 write 0x%02x 0x%02x' %(data[idx], data[idx + 1])
		result += copy(cmd, data, idx, 2)
		idx += 2
	elif cmd == 0x66:
		#print 'reset'
		result += copy(cmd, data, idx, 0)
		break
	elif cmd == 0x90:
		#print 'no dac now, sorry', hex(data[idx])
		idx += 4
	elif cmd == 0x91:
		idx += 4
	elif cmd == 0x92:
		idx += 5
	elif cmd == 0x93:
		idx += 10
	elif cmd == 0x95:
		idx += 4
	else:
		raise Exception('unknown command 0x%02x' %cmd)

print len(result)
